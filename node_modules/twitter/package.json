{
  "_from": "twitter",
  "_id": "twitter@1.7.1",
  "_inBundle": false,
  "_integrity": "sha1-B2I3jx3BwFDkj2ZqypBOJLGpYvQ=",
  "_location": "/twitter",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "twitter",
    "fetchSpec": "latest",
    "name": "twitter",
    "raw": "twitter",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/twitter/-/twitter-1.7.1.tgz",
  "_shasum": "0762378f1dc1c050e48f666aca904e24b1a962f4",
  "_spec": "twitter",
  "_where": "C:\\Users\\Novacane\\OneDrive\\SchoolStuff\\SWE\\SemesterProject",
  "author": {
    "email": "hi@desmondmorris.com",
    "name": "Desmond Morris"
  },
  "bugs": {
    "url": "https://github.com/desmondmorris/node-twitter/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "deep-extend": "^0.5.0",
    "request": "^2.72.0"
  },
  "deprecated": false,
  "description": "Twitter API client library for node.js",
  "devDependencies": {
    "eslint": "^3.12.0",
    "mocha": "^3.2.0",
    "nock": "^9.0.2"
  },
  "homepage": "https://github.com/desmondmorris/node-twitter",
  "keywords": [
    "oauth",
    "streaming",
    "twitter"
  ],
  "license": "MIT",
  "main": "./lib/twitter",
  "name": "twitter",
  "optionalDependencies": {},
  "readme": "# Twitter for Node.js\r\n\r\nAn asynchronous client library for the Twitter [REST](https://dev.twitter.com/rest/public) and [Streaming](https://dev.twitter.com/streaming/overview) API's.\r\n\r\n[![Build Status](https://travis-ci.org/desmondmorris/node-twitter.svg?branch=master)](https://travis-ci.org/desmondmorris/node-twitter)\r\n [![NPM](https://nodei.co/npm/twitter.png?mini=true)](https://nodei.co/npm/twitter/)\r\n\r\n```javascript\r\nvar Twitter = require('twitter');\r\n\r\nvar client = new Twitter({\r\n  consumer_key: '',\r\n  consumer_secret: '',\r\n  access_token_key: '',\r\n  access_token_secret: ''\r\n});\r\n\r\nvar params = {screen_name: 'nodejs'};\r\nclient.get('statuses/user_timeline', params, function(error, tweets, response) {\r\n  if (!error) {\r\n    console.log(tweets);\r\n  }\r\n});\r\n```\r\n\r\n## Installation\r\n\r\n`npm install twitter`\r\n\r\n## Quick Start\r\n\r\nYou will need valid Twitter developer credentials in the form of a set of consumer and access tokens/keys.  You can get these [here](https://apps.twitter.com/).  Do not forgot to adjust your permissions - most POST request require write permissions.\r\n\r\n```javascript\r\nvar Twitter = require('twitter');\r\n```\r\n\r\n## For User based authentication:\r\n\r\n```javascript\r\nvar client = new Twitter({\r\n  consumer_key: '',\r\n  consumer_secret: '',\r\n  access_token_key: '',\r\n  access_token_secret: ''\r\n});\r\n```\r\n\r\nAdd your credentials accordingly.  I would use environment variables to keep your private info safe.  So something like:\r\n\r\n```javascript\r\nvar client = new Twitter({\r\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\r\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\r\n  access_token_key: process.env.TWITTER_ACCESS_TOKEN_KEY,\r\n  access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET\r\n});\r\n```\r\n## For Application Only based authentication:\r\n\r\nYou will need to fetch a bearer token from Twitter as documented [Here](https://dev.twitter.com/oauth/application-only), once you have it you can use it as follows.\r\n\r\n```javascript\r\nvar client = new Twitter({\r\n  consumer_key: '',\r\n  consumer_secret: '',\r\n  bearer_token: ''\r\n});\r\n```\r\n\r\nAdd your credentials accordingly.  I would use environment variables to keep your private info safe.  So something like:\r\n\r\n```javascript\r\nvar client = new Twitter({\r\n  consumer_key: process.env.TWITTER_CONSUMER_KEY,\r\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET,\r\n  bearer_token: process.env.TWITTER_BEARER_TOKEN\r\n});\r\n```\r\n\r\nNB - You will not have access to all endpoints whilst using Application Only authentication, but you will have access to higher API limits.\r\n\r\n## Requests\r\n\r\nYou now have the ability to make GET and POST requests against the API via the convenience methods.\r\n\r\n```javascript\r\nclient.get(path, params, callback);\r\nclient.post(path, params, callback);\r\nclient.stream(path, params, callback);\r\n```\r\n\r\n## REST API\r\n\r\nYou simply need to pass the endpoint and parameters to one of convenience methods.  Take a look at the [documentation site](https://dev.twitter.com/rest/public) to reference available endpoints.\r\n\r\nExample, lets get a [list of favorites](https://dev.twitter.com/rest/reference/get/favorites/list):\r\n\r\n```javascript\r\nclient.get('favorites/list', function(error, tweets, response) {\r\n  if(error) throw error;\r\n  console.log(tweets);  // The favorites.\r\n  console.log(response);  // Raw response object.\r\n});\r\n```\r\n\r\nHow about an example that passes parameters?  Let's  [tweet something](https://dev.twitter.com/rest/reference/post/statuses/update):\r\n\r\n```javascript\r\nclient.post('statuses/update', {status: 'I Love Twitter'},  function(error, tweet, response) {\r\n  if(error) throw error;\r\n  console.log(tweet);  // Tweet body.\r\n  console.log(response);  // Raw response object.\r\n});\r\n```\r\n\r\n### Promises\r\n\r\nThe REST API convenience methods will also return Promises if:\r\n\r\n1.  A callback is omitted\r\n2.  Promise's are available.\r\n\r\nIf those two conditions are met, the above example becomes:\r\n\r\n```javascript\r\nclient.post('statuses/update', {status: 'I Love Twitter'})\r\n  .then(function (tweet) {\r\n    console.log(tweet);\r\n  })\r\n  .catch(function (error) {\r\n    throw error;\r\n  })\r\n```\r\n\r\nNote, the raw `response` object returned by the Request module is not passed through\r\nthe fulfilled promise.  If you require this, please use the callback pattern.\r\n\r\n## Streaming API\r\n\r\nUsing the `stream` convenience method, you to open and manipulate data via a stream piped directly from one of the streaming API's. Let's see who is talking about javascript:\r\n\r\n```javascript\r\nvar stream = client.stream('statuses/filter', {track: 'javascript'});\r\nstream.on('data', function(event) {\r\n  console.log(event && event.text);\r\n});\r\n\r\nstream.on('error', function(error) {\r\n  throw error;\r\n});\r\n\r\n// You can also get the stream in a callback if you prefer.\r\nclient.stream('statuses/filter', {track: 'javascript'}, function(stream) {\r\n  stream.on('data', function(event) {\r\n    console.log(event && event.text);\r\n  });\r\n\r\n  stream.on('error', function(error) {\r\n    throw error;\r\n  });\r\n});\r\n```\r\n\r\n**Note** twitter stream several types of events, see [the docs](https://dev.twitter.com/streaming/overview/messages-types) for more info. There is no canonical way of detecting tweets versus other messages, but some users have had success with the following strategy.\r\n\r\n```javascript\r\n_ = require('lodash')\r\nconst isTweet = _.conforms({\r\n  contributors: _.isObject,\r\n  id_str: _.isString,\r\n  text: _.isString,\r\n})\r\n```\r\n\r\n## Examples\r\n\r\n* [Tweet](https://github.com/desmondmorris/node-twitter/tree/master/examples#tweet)\r\n* [Search](https://github.com/desmondmorris/node-twitter/tree/master/examples#search)\r\n* [Streams](https://github.com/desmondmorris/node-twitter/tree/master/examples#streams)\r\n* [Proxy](https://github.com/desmondmorris/node-twitter/tree/master/examples#proxy)\r\n* [Media](https://github.com/desmondmorris/node-twitter/tree/master/examples#media)\r\n* [Chunked Media](https://github.com/desmondmorris/node-twitter/tree/master/examples#chunked-media)\r\n\r\n## Contributors\r\n\r\nOriginally authored by  [@technoweenie](http://github.com/technoweenie)\r\n and maintained by [@jdub](http://github.com/jdub)\r\n\r\nCurrently maintained by [@desmondmorris](http://github.com/desmondmorris)\r\n\r\n[And we cannot forget the community](https://github.com/desmondmorris/node-twitter/graphs/contributors)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/desmondmorris/node-twitter.git"
  },
  "scripts": {
    "lint": "eslint test/*.js lib/*.js",
    "test": "npm run lint && mocha"
  },
  "version": "1.7.1"
}
